<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.penstore.dao.GoodsMapper">
<!--    根据商品种类展示商品-->
    <select id="getByCategory" resultType="com.example.penstore.entity.Goods">
        SELECT * FROM goods WHERE category_id = #{category_id} AND status = 'available'
    </select>

    <select id="getById" resultType="com.example.penstore.entity.Goods">
        SELECT * FROM goods WHERE id = #{id}
    </select>

    <select id="getByInput" resultType="com.example.penstore.entity.Goods">
        SELECT * FROM  goods WHERE name LIKE CONCAT('%', #{username}, '%')
    </select>
    <select id="searchProducts" resultType="com.example.penstore.entity.Goods">
        SELECT id, name, price,image_url
        FROM goods
        WHERE name LIKE CONCAT('%', #{query}, '%')
    </select>
    <select id="getProductsByIds" resultType="com.example.penstore.entity.Goods">
        SELECT id, name, price, description -- 选择特定字段
        FROM goods
        WHERE id IN
        <foreach collection="productIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <insert id="insertGoods" parameterType="com.example.penstore.dto.GoodsRequest">
        INSERT INTO goods (id,name, price, description, stock, category_id, image_url, shop_id, status, create_time, category)
        VALUES (#{id}, #{name}, #{price}, #{description}, #{stock}, #{category_id}, #{image_url}, #{shop_id}, #{status}, NOW(), #{category})
    </insert>
<!--    修改商品-->
    <update id="updateGoods" parameterType="com.example.penstore.dto.GoodsRequest">
        UPDATE goods
        SET name = #{name}, price = #{price}, description = #{description}, stock = #{stock},
            category_id = #{category_id}, image_url = #{image_url}, status = #{status},category = #{category},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <select id="getGoodsByShopId" resultType="com.example.penstore.entity.Goods">
        SELECT
            g.*,
            (
                SELECT COALESCE(SUM(quantity), 0)
                FROM order_items
                WHERE goods_id = g.id
            ) AS sales
        FROM
            goods g
        WHERE
            g.shop_id = #{shop_id}
    </select>
    <select id="getGoodsByStatus" resultType="com.example.penstore.entity.Goods">
        SELECT * FROM goods WHERE status = #{status} AND shop_id = #{shop_id}
    </select>
    <select id="getGoodsByQuery" parameterType="com.example.penstore.dto.GoodsRequest"
            resultType="com.example.penstore.entity.Goods">
        SELECT * FROM goods
        WHERE 1 = 1
        <if test="name != null and name != ''">  <!-- 检查空字符串 -->
            AND name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="id != null and id != ''">      <!-- 检查空字符串 -->
            AND id = #{id}
        </if>
        <if test="category != null and category != ''">  <!-- 检查空字符串 -->
            AND category = #{category}
        </if>
        <if test="startPrice != null and endPrice != null and startPrice != '' and endPrice != ''">  <!-- 检查空字符串 -->
            AND price BETWEEN #{startPrice} AND #{endPrice}
        </if>
        AND shop_id = #{shop_id}
    </select>

    <update id="GoodsAvailable">
        UPDATE goods SET status = "available", update_time = NOW() WHERE id = #{id}
    </update>
    <update id="GoodsUnsold">
        UPDATE goods SET status = "unsold", update_time = NOW() WHERE id = #{id}
    </update>
    <delete id="deleteGoods">
        DELETE FROM goods WHERE id = #{id}
    </delete>
    <update id="updateStock">
        UPDATE goods SET stock = #{stock} WHERE id = #{id}
    </update>
</mapper>